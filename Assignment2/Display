import javax.swing.*;
//import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class Display extends JFrame {

    static MilesRedeemer redeemer = new MilesRedeemer();
    //Destination des = new Destination();
    ArrayList<Destination> destinations;
    static File file;
    static Scanner fileScanner;
    
    
    //Creates new form Display
    public Display() {
        initComponents();
        
    }



    private String[] getMonthStrings() {
        String[] months = new java.text.DateFormatSymbols().getMonths();
        int lastIndex = months.length - 1;
        if (months[lastIndex] == null || months[lastIndex].length() <= 0) {
            //last item empty
            String[] monthStrings = new String[lastIndex];
            System.arraycopy(months, 0, monthStrings, 0, lastIndex);
            return monthStrings;
        } else {
            //last item not empty
            return months;
        } }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        //panels
        CityPanel = new JPanel();
        RedeemPanel = new JPanel();
        //Redeem miles button
        RedeemButton = new JButton("Redeem Tickets");
        //Labels
        AccMiles = new JLabel("Accumulated Miles");
        DepatureMon = new JLabel("Month of Depature");
        RemMiles = new JLabel("Your Remaining Miles");
        ReqMiles = new JLabel("Required Miles");
        UpgMiles = new JLabel("Miles for Upgrading");
        SuperMiles = new JLabel("Miles for SuperSaver");
        SuperMonths = new JLabel("Months for SuperSaver");
        //Textfields and scrollpanes
        AccMilesTF = new JTextField();
        TicketsTF = new JTextField();
        RemMilesTF = new JTextField();
        ReqMilesTF = new JTextField();
        UpgMilesTF = new JTextField();
        SuperMilesTF = new JTextField();
        SuperMonthsTF = new JTextField();
        final JList cityNames = new JList(redeemer.getCityNames());

        SpinnerModel model1 = new SpinnerListModel(getMonthStrings());
        Months = new JSpinner(model1);

        Cities = new JScrollPane(cityNames);



        //create border objects
        TitledBorder border1 = new TitledBorder("Reedem Tickets");
        TitledBorder border2 = new TitledBorder("List of Destination Cities");


        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Redeem Miles");

        CityPanel.setBackground(new java.awt.Color(51, 102, 255));


        //set border title justification and position
        border1.setTitleJustification(TitledBorder.LEFT);
        border1.setTitlePosition(TitledBorder.TOP);
        border2.setTitleJustification(TitledBorder.LEFT);
        border2.setTitlePosition(TitledBorder.TOP);


        //set borders
        CityPanel.setBorder(border1);
        RedeemPanel.setBorder(border2);

        RemMilesTF.setPreferredSize(new Dimension(100,25));

        GroupLayout CityPanelLayout = new GroupLayout(CityPanel);
        CityPanel.setLayout(CityPanelLayout);
        CityPanelLayout.setHorizontalGroup(
                CityPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(CityPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(TicketsTF)
                                .addContainerGap())
                        .addGroup(CityPanelLayout.createSequentialGroup()
                                .addGap(177, 177, 177)
                                .addComponent(RemMiles)
                                .addGap(18, 18, 18)
                                .addComponent(RemMilesTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(GroupLayout.Alignment.TRAILING, CityPanelLayout.createSequentialGroup()
                                .addGap(122, 200, Short.MAX_VALUE)
                                .addGroup(CityPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(GroupLayout.Alignment.TRAILING, CityPanelLayout.createSequentialGroup()
                                                .addGroup(CityPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(AccMiles)
                                                        .addComponent(DepatureMon))
                                                .addGap(18, 18, 18)
                                                .addGroup(CityPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(AccMilesTF, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(Months, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE))
                                                .addGap(187, 187, 187))
                                        .addGroup(GroupLayout.Alignment.TRAILING, CityPanelLayout.createSequentialGroup()
                                                .addComponent(RedeemButton)
                                                .addGap(237, 237, 237))))
        );
        CityPanelLayout.setVerticalGroup(
                CityPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(CityPanelLayout.createSequentialGroup()
                                .addGroup(CityPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(AccMiles)
                                        .addComponent(AccMilesTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(CityPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(DepatureMon)
                                        .addComponent(Months, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addComponent(RedeemButton)
                                .addGap(18, 18, 18)
                                .addComponent(TicketsTF, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addGroup(CityPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(RemMiles)
                                        .addComponent(RemMilesTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
        );

        RedeemPanel.setBackground(new java.awt.Color(153, 255, 255));


        GroupLayout RedeemPanelLayout = new GroupLayout(RedeemPanel);
        RedeemPanel.setLayout(RedeemPanelLayout);
        RedeemPanelLayout.setHorizontalGroup(
                RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(RedeemPanelLayout.createSequentialGroup()
                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(Cities)
                                        .addGroup(RedeemPanelLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(RedeemPanelLayout.createSequentialGroup())
                                                        .addGroup(RedeemPanelLayout.createSequentialGroup()
                                                                .addComponent(ReqMiles, GroupLayout.PREFERRED_SIZE, 102, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                                                .addComponent(ReqMilesTF, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(GroupLayout.Alignment.TRAILING, RedeemPanelLayout.createSequentialGroup()
                                                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(UpgMiles)
                                                                        .addComponent(SuperMiles)
                                                                        .addComponent(SuperMonths))
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(UpgMilesTF, GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                                                        .addComponent(SuperMilesTF)
                                                                        .addComponent(SuperMonthsTF, GroupLayout.Alignment.TRAILING))))))
                                .addContainerGap())
        );
        RedeemPanelLayout.setVerticalGroup(
                RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, RedeemPanelLayout.createSequentialGroup()
                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(RedeemPanelLayout.createSequentialGroup()
                                                .addComponent(Cities)
                                                .addGap(18, 18, 18)
                                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(ReqMilesTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(ReqMiles))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(UpgMilesTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(RedeemPanelLayout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(UpgMiles)))
                                .addGap(18, 18, 18)
                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(SuperMilesTF, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SuperMiles, GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(RedeemPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                        .addComponent(SuperMonthsTF, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(SuperMonths))
                                .addGap(11, 11, 11))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(RedeemPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CityPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(CityPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RedeemPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        RedeemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int miles = Integer.parseInt(AccMilesTF.getText());
                Object month = Months.getValue();


            }
        });

        cityNames.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                Destination des;

                if(!e.getValueIsAdjusting()){
                    //des = redeemer.findDestination(cityNames.getSelectedValue());
                    String start;
                    String end;


                }
            }
        });

        pack();
    }// </editor-fold>





    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try { // Open file and read it
            file = new File(args[0]);
            fileScanner = new Scanner(file);
            redeemer.readDestinations(fileScanner);
        } catch (FileNotFoundException e) {
            System.out.printf("File not found. Program exiting...\n");
            System.exit(2);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.printf("No command lines arguments. Program exiting...\n");
            System.exit(3);
        }


        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify
    private JButton RedeemButton;
    private JLabel AccMiles;
    private JLabel DepatureMon;
    private JLabel RemMiles;
    private JLabel ReqMiles;
    private JLabel UpgMiles;
    private JLabel SuperMiles;
    private JLabel SuperMonths;
    private JPanel CityPanel;
    private JPanel RedeemPanel;
    private JSpinner Months;
    private JScrollPane Cities;
    private JTextField AccMilesTF;
    private JTextField ReqMilesTF;
    private JTextField TicketsTF;
    private JTextField RemMilesTF;
    private JTextField UpgMilesTF;
    private JTextField SuperMilesTF;
    private JTextField SuperMonthsTF;

    // End of variables declaration
}
